const { createClient } = require("@supabase/supabase-js");
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);

function normalizeType(type) {
  const map = {
    ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢: "expense",
    ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö: "income",
    expense: "expense",
    income: "income",
  };
  return map[type?.trim()] || type;
}

async function saveUserMessage(userId, text) {
  try {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å userId ‡∏•‡∏á table users
    await ensureUserExists(userId);

    // ‚úÖ ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° [type] [category] [name] [amount]
    const parts = text.trim().split(" ");
    if (parts.length < 4) {
      return {
        message:
          "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô: ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ ‡∏≠‡∏≤‡∏´‡∏≤‡∏£ ‡∏ï‡πâ‡∏°‡∏¢‡∏≥‡∏Å‡∏∏‡πâ‡∏á 50 ‡∏´‡∏£‡∏∑‡∏≠ expense food tomyumgunong 60)",
      };
    }

    let [type, category, name, amount] = parts;
    type = normalizeType(type.toLowerCase());
    const value = parseFloat(amount);

    console.log('part: ',parts)
    console.log('type: ',type)
    console.log('category: ',category)
    console.log('name: ',name)
    console.log('amount: ',amount)
    if (isNaN(value)) {
      return { message: "‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" };
    }

    // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    const categoryTable =
      type === "expense" ? "category_expenses" : "category_income";

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const { data: categoryData, error: catErr } = await supabase
      .from(categoryTable)
      .select("id")
      .eq("name", category)
      .maybeSingle();

    if (catErr) throw catErr;

    let categoryId;
    if (!categoryData) {
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ category ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      const { data: newCat, error: insertCatErr } = await supabase
        .from(categoryTable)
        .insert([{ name: category }])
        .select()
        .single();

      if (insertCatErr) throw insertCatErr;
      categoryId = newCat.id;
    } else {
      categoryId = categoryData.id;
    }

    // ‚úÖ ‡πÅ‡∏¢‡∏Å insert ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
    if (type === "expense") {
      const { error } = await supabase.from("list_expense").insert([
        {
          userId,
          categoryId,
          name,
          amount: value,
        },
      ]);
      if (error) throw error;
      return { message: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ "${name}" ${value} ‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡πâ‡∏ß` };
    }

    if (type === "income") {
      const { error } = await supabase.from("list_income").insert([
        {
          userId,
          categoryId,
          name,
          amount: value,
        },
      ]);
      if (error) throw error;
      return { message: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö "${name}" ${value} ‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡πâ‡∏ß` };
    }

    return {
      message:
        "‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢/‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ expense/income ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
    };
  } catch (err) {
    console.error("Insert error:", err.message);
    return { message: `‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}` };
  }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
async function ensureUserExists(userId) {
  try {
    const { data: existing, error } = await supabase
      .from("users")
      .select("id")
      .eq("line_user_id", userId)
      .maybeSingle();

    if (error) throw error;

    if (!existing) {
      const { error: insertErr } = await supabase
        .from("users")
        .insert([{ line_user_id: userId }]);

      if (insertErr) throw insertErr;
      console.log(`üÜï Added new user: ${userId}`);
    } else {
      console.log(`‚úÖ Existing user: ${userId}`);
    }
  } catch (err) {
    console.error("User insert/check error:", err.message);
  }
}

module.exports = { saveUserMessage };
